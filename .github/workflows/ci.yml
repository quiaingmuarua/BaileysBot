name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Baileys submodule
      run: |
        cd baileys
        npm ci
        npm run build
        cd ..
    
    - name: Check code syntax
      run: node --check example.js
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Check for outdated dependencies
      run: npm outdated || true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Baileys submodule
      run: |
        cd baileys
        npm ci
        npm run build
        cd ..
    
    - name: Run ESLint (if configured)
      run: |
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f eslint.config.js ]; then
          npx eslint . --ext .js,.mjs --max-warnings 0
        else
          echo "ESLint not configured, skipping..."
        fi
      continue-on-error: true
    
    - name: Check code formatting
      run: |
        if command -v prettier &> /dev/null; then
          npx prettier --check "**/*.{js,json,md}"
        else
          echo "Prettier not installed, skipping format check..."
        fi
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Baileys submodule
      run: |
        cd baileys
        npm ci
        npm run build
        cd ..
    
    - name: Verify project structure
      run: |
        echo "Checking project structure..."
        ls -la
        echo "Checking baileys submodule..."
        ls -la baileys/lib/
        echo "Checking main files..."
        test -f example.js && echo "✓ example.js exists"
        test -f package.json && echo "✓ package.json exists"
        test -f baileys/lib/index.js && echo "✓ baileys build successful"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level high
    
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

  submodule-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Verify submodule status
      run: |
        echo "Checking submodule status..."
        git submodule status
        
        echo "Verifying baileys submodule..."
        cd baileys
        git log --oneline -5
        echo "Current commit: $(git rev-parse HEAD)"
        
        echo "Checking if submodule is up to date..."
        git fetch origin
        COMMITS_BEHIND=$(git rev-list --count HEAD..origin/master 2>/dev/null || echo "0")
        if [ "$COMMITS_BEHIND" -gt "0" ]; then
          echo "⚠️  Submodule is $COMMITS_BEHIND commits behind origin/master"
          echo "Consider updating the submodule with: git submodule update --remote"
        else
          echo "✓ Submodule is up to date"
        fi
